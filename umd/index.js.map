{"version":3,"sources":["mixer.js","index.js"],"names":["AudioMixer","audioSources","audioContext","AudioContext","audioDestination","createMediaStreamDestination","stream","tracks","getAudioTracks","track","undefined","audioSource","createMediaStreamSource","push","connect","disconnect","index","indexOf","splice","stop"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;IAKMA;AACJ,wBAAc;AAAA;;AACZ,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,YAAL,GAAoB,IAAIC,YAAJ,EAApB;AACA,SAAKC,gBAAL,GAAwB,KAAKF,YAAL,CAAkBG,4BAAlB,EAAxB;AACD;;;;;+FAEcC;;;;;;AACPC,gBAAAA,SAASD,MAAM,CAACE,cAAP;AACXC,gBAAAA,QAAQ;;sBACTF,MAAM,CAAC,CAAD,CAAN,KAAcG;;;;;;;;AAGfD,gBAAAA,KAAK,GAAGF,MAAM,CAAC,CAAD,CAAd;;;AAGII,gBAAAA,cAAc,KAAKT,YAAL,CAAkBU,uBAAlB,CAA0CN,MAA1C;AACpB,qBAAKL,YAAL,CAAkBY,IAAlB,CAAuBF,WAAvB;AACAA,gBAAAA,WAAW,CAACG,OAAZ,CAAoB,KAAKV,gBAAzB;iDACOO;;;;;;;;;;;;;;;;;;gCAGGA,aAAa;AACvBA,MAAAA,WAAW,CAACI,UAAZ;AACA,UAAMC,KAAK,GAAG,KAAKf,YAAL,CAAkBgB,OAAlB,CAA0BN,WAA1B,CAAd;AACA,WAAKV,YAAL,CAAkBiB,MAAlB,CAAyBF,KAAzB,EAAgC,CAAhC;AACD;;;gCAEW;AACV,aAAO,KAAKZ,gBAAL,CAAsBE,MAA7B;AACD;;;2BAEM;AACL,WAAKJ,YAAL,CAAkBiB,IAAlB;AACD;;;;;;eAGYnB;;;;;AC1Cf","file":"index.js","sourceRoot":"..","sourcesContent":["/*\n *  Simple Audio Mixer\n *       Oviser\n */\n\nclass AudioMixer {\n  constructor() {\n    this.audioSources = []\n    this.audioContext = new AudioContext()\n    this.audioDestination = this.audioContext.createMediaStreamDestination()\n  }\n\n  async addAudio(stream) {\n    const tracks = stream.getAudioTracks()\n    let track = null\n    if(tracks[0] === undefined){\n      return\n    } else {\n      track = tracks[0]\n    }\n\n    const audioSource = this.audioContext.createMediaStreamSource(stream)\n    this.audioSources.push(audioSource)\n    audioSource.connect(this.audioDestination)\n    return audioSource\n  }\n\n  deleteAudio(audioSource) {\n    audioSource.disconnect()\n    const index = this.audioSources.indexOf(audioSource)\n    this.audioSources.splice(index, 1)\n  }\n\n  getStream() {\n    return this.audioDestination.stream\n  }\n\n  stop() {\n    this.audioContext.stop()\n  }\n}\n\nexport default AudioMixer\n","import './mixer.js'"]}